CREATE DATABASE JOB;
SHOW databases;
USE JOB;
CREATE TABLE STUDENT(
ID INT PRIMARY KEY,
NAME VARCHAR(50),
AGE INT NOT NULL);
SELECT * FROM STUDENT;
CREATE DATABASE IF NOT exists JOBB;
DROP DATABASE IF EXISTS JOBB;
INSERT INTO STUDENT(
ID,NAME,AGE) VALUES (1, "RAM" , 16),
(2,"MOHAN",25),(3,"RAHUL",23);

SELECT * FROM STUDENT;



CREATE TABLE CY (
    ID INT PRIMARY KEY,
    CITY VARCHAR(50),
    AGE INT,
    CONSTRAINT AGE_CHECK CHECK (AGE >= 18 AND CITY = 'DELHI')
);

CREATE TABLE NEWTABB(
AGE int  constraint AGE_CHECK (AGE >=25));

CREATE TABLE NEWTABB (
    AGE INT CHECK (AGE >= 25)
);

SELECT * FROM STUDENT LIMIT 1;

SELECT * FROM STUDENT;

SELECT * FROM STUDENT ORDER BY AGE ASC;

SELECT * FROM STUDENT ORDER BY AGE DESC;

-- AGGEREGATE FUNCTION

SELECT MAX(AGE) FROM STUDENT;

SELECT COUNT(AGE) FROM STUDENT;

SELECT SUM(AGE) FROM  STUDENT;

INSERT INTO STUDENT 
VALUES (6, "RAM",25),
(4,"RAHUL",29),
(5,"ABHI",23);

SELECT * FROM STUDENT;

SELECT  AGE,COUNT(AGE) FROM STUDENT group by AGE ;

SELECT  AGE, COUNT(AGE) FROM STUDENT GROUP BY AGE  HAVING MAX(AGE)<25;


UPDATE STUDENT SET AGE=100  WHERE AGE = 29;

UPDATE STUDENT SET AGE = 200 , NAME = "RAMCHARAN" WHERE AGE = 100 OR     NAME = "RAM" ;

SELECT * FROM STUDENT;

DELETE FROM STUDENT WHERE AGE=200;
ALTER TABLE STUDENT ADD COLUMN  CITY VARCHAR(50);

ALTER TABLE STUDENT DROP COLUMN CITY;



ALTER TABLE STUDENT CHANGE column AGE WEIGHT INT ;

ALTER TABLE STUDENT MODIFY WEIGHT VARCHAR(10);

SELECT * FROM STUDENT;

truncate TABLE STUDENTS;

ALTER TABLE STUDENT RENAME TO STUDENTS;
SELECT * FROM STUDENTS;

-- joins 

select * from STUDENTS;

INSERT INTO STUDENTS ( ID , NAME , WEIGHT ) 
	VALUES (101, "RAHUL",56),
    (102,"SUMIT",50),
    (103,"JATIN",80),
    (104,"ROHIT",85);

SELECT * FROM STUDENTS;

CREATE TABLE COURSE(S_ID INT PRIMARY KEY , COURSE_NAME VARCHAR(50));

INSERT INTO COURSE (S_ID , COURSE_NAME) 
	VALUES( 101 , "ENG"),
    (103,"MATH"),
    (104,"HINDI"),
    (102,"SCIENCE");

SELECT * FROM COURSE;

ALTER TABLE COURSE
CHANGE COLUMN S_ID ID INT;

SELECT * FROM COURSE;

SELECT * FROM STUDENTS 
	INNER JOIN  COURSE ON STUDENTS.ID=COURSE.ID;
    
SELECT * FROM STUDENTS LEFT JOIN COURSE ON STUDENTS.ID=COURSE.ID;

SELECT * FROM STUDENTS RIGHT JOIN COURSE ON STUDENTS.ID=COURSE.ID;

INSERT INTO COURSE ( ID , COURSE_NAME)
VALUES 
(110,"GOPAL"),
(150,"ANU");

SELECT * FROM COURSE;

SELECT * FROM STUDENTS INNER JOIN COURSE ON STUDENTS.ID=COURSE.ID;

SELECT * FROM STUDENTS LEFT JOIN COURSE ON STUDENTS.ID=COURSE.ID;

SELECT * FROM STUDENTS RIGHT JOIN COURSE ON STUDENTS.ID=COURSE.ID;

SELECT * FROM STUDENTS FULL JOIN COURSE ON  STUDENTS.ID = COURSE.ID;

SELECT * 
FROM STUDENTS 
FULL JOIN COURSE 
ON STUDENTS.ID = COURSE.ID;

desc STUDENTS;


SELECT * 
FROM STUDENTS 
LEFT JOIN COURSE 
ON STUDENTS.ID = COURSE.ID union

SELECT * 
FROM STUDENTS 
RIGHT JOIN COURSE 
ON STUDENTS.ID = COURSE.ID;


SELECT * 
FROM STUDENTS 
RIGHT JOIN COURSE 
ON STUDENTS.ID = COURSE.ID;

SELECT * FROM STUDENTS AS S LEFT JOIN COURSE AS C ON S.ID=C.ID UNION 
SELECT * FROM STUDENTS AS S RIGHT  JOIN COURSE AS C ON S.ID=C.ID;

SELECT * FROM STUDENTS AS S LEFT JOIN COURSE AS C ON S.ID=C.ID  WHERE C.ID IS NULL;

SELECT * FROM STUDENTS AS S RIGHT JOIN COURSE AS C ON S.ID=C.ID  WHERE S.ID IS NULL;

SELECT * FROM STUDENTS AS S RIGHT
 JOIN COURSE AS C ON S.ID=C.ID  WHERE S.ID IS NULL;
 
 -- STUDENTS wale jinka COURSE me match nahi mila
SELECT * 
FROM STUDENTS AS S 
LEFT JOIN COURSE AS C 
ON S.ID = C.ID 
WHERE C.ID IS NULL

UNION

-- COURSE wale jinka STUDENT me match nahi mila
SELECT * 
FROM STUDENTS AS S 
RIGHT JOIN COURSE AS C 
ON S.ID = C.ID 
WHERE S.ID IS NULL;





-- SELF JOIN 

CREATE TABLE EMPLOYEES (
    EMP_ID INT PRIMARY KEY,
    EMP_NAME VARCHAR(50),
    MANAGER_ID INT
);


INSERT INTO EMPLOYEES (EMP_ID, EMP_NAME, MANAGER_ID)
VALUES 
(1, 'Rahul', NULL),     -- CEO
(2, 'Priya', 1),         -- Reports to Rahul
(3, 'Aman', 1),          -- Reports to Rahul
(4, 'Neha', 2),          -- Reports to Priya
(5, 'Vikram', 2);        -- Reports to Priya

SELECT * FROM EMPLOYEES;

-- SELF JOIN 

SELECT EE.EMP_NAME AS EMPLOYEE , MM.EMP_NAME  AS MANAGER FROM EMPLOYEES  AS EE JOIN EMPLOYEES AS MM ON EE.EMP_ID=MM.MANAGER_ID; 


-- Part 1: Employee → Manager
SELECT 
    EE.EMP_NAME AS EMPLOYEE,
    MM.EMP_NAME AS MANAGER
FROM 
    EMPLOYEES AS EE
JOIN 
    EMPLOYEES AS MM
ON 
    EE.MANAGER_ID = MM.EMP_ID

UNION

-- Part 2: Manager → Employee (just reverse the labels)
SELECT 
    MM.EMP_NAME AS EMPLOYEE,
    EE.EMP_NAME AS MANAGER
FROM 
    EMPLOYEES AS EE
JOIN 
    EMPLOYEES AS MM
ON 
    EE.MANAGER_ID = MM.EMP_ID;
    
    
CREATE TABLE ABCD ( ID INT PRIMARY KEY , SALARY INT DEFAULT 25000 );

INSERT INTO ABCD (ID , SALARY) 
VALUES (2,2500);
INSERT INTO ABCD (ID) VALUES (25);

SELECT * FROM ABCD;
INSERT INTO ABCD (ID , SALARY) 
VALUES (554,2500),(255,DEFAULT );

-- SELF JOIN 

SELECT * FROM EMPLOYEE AS AA
JOIN EMPLOYEE AS BB 
ON  AA.EMP_ID=BB.MANAGER_ID;


SELECT AA.EMP_NAME , BB.MANAGER_NAME FROM EMPLOYEE AS AA
JOIN EMPLOYEE AS BB 
ON  AA.EMP_ID=BB.MANAGER_ID;







SELECT 
    *
FROM 
    EMPLOYEES AS EE
JOIN 
    EMPLOYEES AS MM
ON 
    EE.MANAGER_ID = MM.EMP_ID;
    
    



